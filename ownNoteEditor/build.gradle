/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'markus' at '06.10.15 11:58' with Gradle 2.7
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.7/userguide/tutorial_java_projects.html
 */

// support for javafx11 - see https://openjfx.io/openjfx-docs/#gradle
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.0'
    }
}

// Use a plugin (https://github.com/crotwell/gradle-macappbundle) to create a Mac OS X .app and .dmg
plugins {
    id "edu.sc.seis.macAppBundle" version "2.1.5"
}

macAppBundle {
    mainClassName = "tf.ownnote.ui.main.OwnNoteEditorManager"
    icon          = "src/main/resources/ownNoteEditor.icns"
    volumeName    = "ownNoteEditor"
    dmgName       = "ownNoteEditor"
    javaProperties.put("apple.laf.useScreenMenuBar", "true")
    // Uncomment the next line to bundle the JRE with the Mac OS X application
    //bundleJRE     = true
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.google.osdetector'

mainClassName = 'tf.ownnote.ui.main.OwnNoteEditorManager'

ext.platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // JavaFX11 explicit dependencies
    compile "org.openjfx:javafx-base:11.0.2:$platform"
    compile "org.openjfx:javafx-graphics:11.0.2:$platform"
    compile "org.openjfx:javafx-controls:11.0.2:$platform"
    compile "org.openjfx:javafx-fxml:11.0.2:$platform"
    compile "org.openjfx:javafx-swing:11.0.2:$platform"
    compile "org.openjfx:javafx-web:11.0.2:$platform"
    compile "org.openjfx:javafx-media:11.0.2:$platform"
    
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'commons-cli:commons-cli:1.4'
    compile 'commons-io:commons-io:2.6'
    compile 'org.apache.commons:commons-lang3:3.9'
    compile group: 'org.apache.commons', name: 'commons-text', version: '1.8'
    
    // new look & feel for old code :-)
    // TFE, 20181209: not working with Java9+
//    compile group: 'org.jfxtras', name: 'jmetro', version: '5.0.0'

    testCompile "org.testfx:testfx-junit:4.0.+"
    testCompile "org.testfx:testfx-core:4.0.+"
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.5.1'
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.controls,javafx.graphics,javafx.base,javafx.fxml,javafx.web,javafx.swing,javafx.media',
                '-Xlint:unchecked',
                '-Xlint:deprecation',
        ]
    }
}

// see https://github.com/kelemen/netbeans-gradle-project/issues/403 on how to extend gradle tasks
def newArgs = [ '--add-modules', 'javafx.controls,javafx.graphics,javafx.base,javafx.fxml,javafx.web,javafx.swing,javafx.media',
                // various exports needed at run time - see https://stackoverflow.com/a/52142071
                '--add-exports', 'javafx.graphics/com.sun.javafx.util=ALL-UNNAMED',
                '--add-exports', 'javafx.base/com.sun.javafx.reflect=ALL-UNNAMED',
                '--add-exports', 'javafx.base/com.sun.javafx.beans=ALL-UNNAMED',
                '--add-exports', 'javafx.base/com.sun.javafx.logging=ALL-UNNAMED',
                '--add-exports', 'javafx.graphics/com.sun.prism=ALL-UNNAMED',
                '--add-exports', 'javafx.graphics/com.sun.javafx.sg.prism=ALL-UNNAMED',
                '--add-exports', 'javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED',
                '--add-exports', 'javafx.media/com.sun.media.jfxmedia=ALL-UNNAMED',
                '--add-exports', 'javafx.media/com.sun.media.jfxmedia.events=ALL-UNNAMED',
                '--add-exports', 'javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED',
    ]
    
// extend Netbeans Gradle "Run" task
run {
    doFirst {
        jvmArgs = jvmArgs.plus(['--module-path', classpath.asPath,])
        jvmArgs = jvmArgs.plus(newArgs)
    }
}

// extend Netbeans Gradle "Debug" task
task(debug, dependsOn: 'classes', type: JavaExec) {
    doFirst {
        main = 'tf.ownnote.ui.main.OwnNoteEditorManager'
        classpath = sourceSets.main.runtimeClasspath
        jvmArgs = jvmArgs.plus([
                '--module-path', classpath.asPath,
                "-Xdebug",
                "-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005",
        ])
        jvmArgs = jvmArgs.plus(newArgs)
    }
}

jar {
    manifest {
        attributes(
            'Built-By'       : System.properties['user.name'],
            'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
            'Created-By'     : "Gradle ${gradle.gradleVersion}",
            'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
            'App-Name'       : "ownNoteEditor",
            'App-Version'    : "4.5",
            'App-URL'        : "https://github.com/ThomasDaheim/ownNoteEditor"
        )
    }
}
