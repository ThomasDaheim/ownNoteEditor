/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'markus' at '06.10.15 11:58' with Gradle 2.7
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.7/userguide/tutorial_java_projects.html
 */

// support for javafx11 - see https://openjfx.io/openjfx-docs/#gradle
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.0'
    }
}

//// Use a plugin (https://github.com/crotwell/gradle-macappbundle) to create a Mac OS X .app and .dmg
plugins {
    id "edu.sc.seis.macAppBundle" version "2.1.5"
}

macAppBundle {
    mainClassName   = "tf.ownnote.ui.main.OwnNoteEditorManager"
    icon            = "src/main/resources/ownNoteEditor.icns"
    volumeName      = "ownNoteEditor"
    dmgName         = "ownNoteEditor"
    // TFE, 20200504: some change in Gradle now requires values for below attributes - but I have no clue what to put here...
    backgroundImage = "TBD"
    certIdentity    = "TBD"
    jreHome         = "TBD"
    keyChain        = "TBD"
    javaProperties.put("apple.laf.useScreenMenuBar", "true")
    // Uncomment the next line to bundle the JRE with the Mac OS X application
    //bundleJRE     = true
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.google.osdetector'

ext.platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// In this section you declare where to find the dependencies of your project
repositories {
    mavenLocal() {
        // breaking change in gradle 6.*: doesn't find jar files automatically when no pom.xml is present...
        // https://discuss.gradle.org/t/how-to-fetch-maven-artifact-without-pom-file-in-gradle-6-0/33836
        metadataSources {
            mavenPom()
            artifact()
        }
    }
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

if (!hasProperty('mainClass')) {
    ext.mainClass = 'tf.ownnote.ui.main.OwnNoteEditorManager'
}
mainClassName = 'tf.ownnote.ui.main.OwnNoteEditorManager'
def appName='OwnNoteEditor'
group='tf.OwnNoteEditor'
version='5.3'

// In this section you declare the dependencies for your production and test code
dependencies {
    // JavaFX11 explicit dependencies
//    def javafx_version='11.0.2'
//    def javafx_version='14'
    def javafx_version='15.0.1'
    compile "org.openjfx:javafx-base:$javafx_version:$platform"
    compile "org.openjfx:javafx-graphics:$javafx_version:$platform"
    compile "org.openjfx:javafx-controls:$javafx_version:$platform"
    compile "org.openjfx:javafx-fxml:$javafx_version:$platform"
    compile "org.openjfx:javafx-swing:$javafx_version:$platform"
    compile "org.openjfx:javafx-web:$javafx_version:$platform"
    compile "org.openjfx:javafx-media:$javafx_version:$platform"
    
    // TFE, 20200809: use our own helper library
    compile 'tf.JavaHelper:JavaHelper:1.13'

    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'commons-cli:commons-cli:1.4'
    compile 'commons-io:commons-io:2.6'
    compile 'org.apache.commons:commons-lang3:3.9'
    compile group: 'org.apache.commons', name: 'commons-text', version: '1.8'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.15'
    compile group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.14'
    compile group: 'org.unbescape', name: 'unbescape', version: '1.1.6.RELEASE'
    compile group: 'org.jfxtras', name: 'jfxtras-controls', version: '14-r1'
    
    // new look & feel for old code :-)
    compile group: 'org.jfxtras', name: 'jmetro', version: '11.6.14'
    compile 'de.jensd:fontawesomefx:8.9'

    testCompile "org.testfx:testfx-junit:4.0.+"
    testCompile "org.testfx:testfx-core:4.0.+"
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.2'
    // TFE, 20210121: capture System.err() easily
    testCompile group: 'com.github.stefanbirkner', name: 'system-lambda', version: '1.2.0'
}


task unzip(type: Copy) {
    def zipFile = file("${buildDir}/distributions/OwnNoteEditor-${version}.zip")
    def outputDir = file("dist")
 
    from zipTree(zipFile)
    into outputDir
}

compileJava {
    doFirst {
        options.compilerArgs = [
            '-g',
            '--module-path', classpath.asPath,
            '--add-modules', 'javafx.controls,javafx.graphics,javafx.base,javafx.fxml,javafx.web,javafx.swing,javafx.media',
            '-Xlint:unchecked',
            '-Xlint:deprecation',
        ]
    }
}

// see https://github.com/kelemen/netbeans-gradle-project/issues/403 on how to extend gradle tasks
def newArgs = [ '--add-modules', 'javafx.controls,javafx.graphics,javafx.base,javafx.fxml,javafx.web,javafx.swing,javafx.media',
                // various exports needed at run time - see https://stackoverflow.com/a/52142071
                '--add-exports', 'javafx.base/com.sun.javafx.reflect=ALL-UNNAMED',
                '--add-exports', 'javafx.base/com.sun.javafx.beans=ALL-UNNAMED',
                '--add-exports', 'javafx.base/com.sun.javafx.logging=ALL-UNNAMED',
                '--add-exports', 'javafx.base/com.sun.javafx.collections=ALL-UNNAMED',
                '--add-exports', 'javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED',
                '--add-exports', 'javafx.graphics/com.sun.prism=ALL-UNNAMED',
                '--add-exports', 'javafx.graphics/com.sun.javafx.sg.prism=ALL-UNNAMED',
                '--add-exports', 'javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED',
                '--add-exports', 'javafx.graphics/com.sun.javafx.util=ALL-UNNAMED',
                '--add-exports', 'javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED',
                '--add-exports', 'javafx.media/com.sun.media.jfxmedia=ALL-UNNAMED',
                '--add-exports', 'javafx.media/com.sun.media.jfxmedia.events=ALL-UNNAMED',
                // TFE, 20200803: workaround for "WARNING: Illegal reflective access by com.rits.cloning.Cloner"
                // https://github.com/x-stream/xstream/issues/101#issuecomment-667734663
                '--add-opens', 'java.base/java.util=ALL-UNNAMED',
                '--add-opens', 'javafx.base/com.sun.javafx.collections=ALL-UNNAMED',
                '--add-opens', 'javafx.graphics/javafx.scene.layout=ALL-UNNAMED',
    ]
    
// extend Netbeans Gradle "Run" task
run {
    doFirst {
        jvmArgs = jvmArgs.plus(['--module-path', classpath.asPath,])
        jvmArgs = jvmArgs.plus(newArgs)
        enableAssertions = true
    }
}

test {
    doFirst {
        jvmArgs = jvmArgs.plus(['-Dtestfx.robot=awt'])
    }
}

// extend Netbeans Gradle "Debug" task
task(debug, dependsOn: 'classes', type: JavaExec) {
    doFirst {
        main = 'tf.ownnote.ui.main.OwnNoteEditorManager'
        classpath = sourceSets.main.runtimeClasspath
        jvmArgs = jvmArgs.plus([
                '--module-path', classpath.asPath,
                "-Xdebug",
                "-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005",
        ])
        jvmArgs = jvmArgs.plus(newArgs)
        enableAssertions = true
    }
}

jar {
    manifest {
        attributes(
            'Built-By'       : System.properties['user.name'],
            'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
            'Created-By'     : "Gradle ${gradle.gradleVersion}",
            'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
            'App-Name'       : appName,
            'App-Version'    : version,
            'App-URL'        : "https://github.com/ThomasDaheim/ownNoteEditor"
        )
    }
}

sourceSets {
    main {
        resources { 
            // only use minified files
            exclude { 
                FileTreeElement elem -> ((elem.name.contains('.js') || elem.name.contains('.css')) && !elem.name.contains('.min.')) 
            }
        } 
    }  
}
